{"version":3,"file":"static/js/716.8bc5628f.chunk.js","mappings":"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","sources":["Components/Profile/Profile.module.css","webpack://samurai-way/./src/Components/Profile/MyPosts/MyPosts.module.css?bd90","webpack://samurai-way/./src/Components/Profile/MyPosts/Post/Post.module.css?54ab","Components/Profile/MyPosts/Post/Post.tsx","Components/Profile/MyPosts/FormMyPosts.tsx","Components/Profile/MyPosts/MyPosts.tsx","Components/Profile/MyPosts/MyPostsContainer.tsx","Components/Profile/TopInfo/ProfileStatusWithHook.tsx","Components/Profile/TopInfo/TopInfo.tsx","Components/Profile/Profile.tsx","Components/Profile/ProfileConatiner.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {};","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__C24bo\",\"posts\":\"MyPosts_posts__7EmOH\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__xrbSH\"};","import s from './Post.module.css';\nimport React from 'react';\n\ntype PostPropsType = {\n    message: string\n    likeCounter: number\n}\n\nconst Post = (props: PostPropsType) => {\n    return (\n        <div className={s.item}>\n            <img src=\"https://w7.pngwing.com/pngs/862/646/png-transparent-beard-hipster-male-man-avatars-xmas-giveaway-icon-thumbnail.png\"/>\n            {props.message}\n            <div>\n                <span>like {props.likeCounter}</span>\n            </div>\n        </div>\n    );\n}\n\nexport default Post;","import React, {FC} from 'react';\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {FormControlsTextarea} from \"../../common/FormControls/FormControlsTextarea\";\r\nimport {maxLengthVC, required} from \"../../../utils/validators/validators\";\r\n\r\nexport type FormMyPostsType = {\r\n    addNewPost: string\r\n}\r\n\r\nlet maxLengthTen = maxLengthVC(10)\r\n\r\nconst FormMyPosts: FC<InjectedFormProps<FormMyPostsType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Field name={'addNewPost'} component={FormControlsTextarea} validate={[required, maxLengthTen]}></Field>\r\n            <button>Add</button>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport const FormMyPostsRedux = reduxForm<FormMyPostsType>({form: 'addNewPosts'})(FormMyPosts)\r\n\r\n","import s from './MyPosts.module.css';\nimport React, {memo} from 'react';\nimport Post from './Post/Post';\nimport {MyPostsPropsType} from \"./MyPostsContainer\";\nimport {FormMyPostsRedux, FormMyPostsType} from \"./FormMyPosts\";\n\nconst MyPosts = memo((props: MyPostsPropsType) => {\n\n    let post = props.posts.map((el, index) => <Post key={index} message={el.message}\n                                                                   likeCounter={el.likeCounter}/>)\n\n    const AddNewPost = (value: FormMyPostsType) => {\n        props.addPost(value.addNewPost)\n    }\n\n    return (\n        <div className={s.postsBlock}>\n            <h3>My posts</h3>\n            <div>\n                <FormMyPostsRedux onSubmit={AddNewPost}/>\n            </div>\n            <div className={s.posts}>\n                {post}\n            </div>\n        </div>\n    );\n})\n\nexport default MyPosts;","import React from 'react';\nimport {addPostCreator, changeNewPostCreator, postDateType, ProfilePageType} from \"../../../redux/profileReducer\";\nimport MyPosts from \"./MyPosts\";\nimport {connect} from \"react-redux\";\nimport {AppReduxType} from \"../../../redux/reduxStore\";\nimport {Dispatch} from \"redux\";\n\ntype mapStateToPropsType = {\n    posts: postDateType[]\n}\n\ntype mapDispatchToProps = {\n    addPost: (newText: string) => void,\n}\n\nexport type MyPostsPropsType = mapStateToPropsType & mapDispatchToProps\n\nconst mapStateToProps = (state: AppReduxType): mapStateToPropsType => {\n    return {\n        posts: state.profilePage.postDate,\n    }\n\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch): mapDispatchToProps => {\n    return {\n        addPost: (newText: string) => {\n            dispatch(addPostCreator(newText))\n        }\n    }\n\n}\n\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)","import {ChangeEvent, Component, FC, useEffect, useState} from \"react\";\r\n\r\ntype ProfileStatusPropsType = {\r\n    status: string | null\r\n    updateStatus: (title: string | null) => void\r\n}\r\n\r\nexport const ProfileStatusWithHooks:FC<ProfileStatusPropsType> = (props) => {\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [status, setStatus] = useState(props.status)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const onEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n\r\n        return <div>\r\n            {editMode ? <input onChange={onChangeHandler} autoFocus onBlur={offEditMode} value={status ? status : ''}/> : <span onDoubleClick={onEditMode}>{status ? status : 'Type your new status'}</span>}\r\n        </div>\r\n\r\n}","import React, {FC} from 'react';\nimport {ProfileType} from \"../../../redux/profileReducer\";\nimport Preloader from \"../../common/Preloader/Preloader\";\nimport ava from '../../../assets/images/149071.png'\nimport {ProfileStatusWithHooks} from \"./ProfileStatusWithHook\";\n\ntype TopInfoTypeProps = {\n    profile: ProfileType | null\n    status: string | null\n    updateStatus: (title: string | null) => void\n}\n\nconst TopInfo: FC<TopInfoTypeProps> = ({\n                                           profile,\n                                           status,\n                                           updateStatus\n                                       }) => {\n    if (!profile) {\n        return <Preloader/>\n    }\n\n    return (\n        <div>\n            <div>\n                <img src={profile.photos.large ? profile.photos.large : ava}/>\n                <div><b>{profile.fullName}</b></div>\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\n            </div>\n        </div>\n    )\n}\n\nexport default TopInfo","import React from 'react';\nimport s from './Profile.module.css';\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\nimport {ProfileType} from \"../../redux/profileReducer\";\nimport TopInfo from \"./TopInfo/TopInfo\";\n\ntype ProfilePropsType = {\n    profile: ProfileType | null\n    status: string | null\n    updateStatus: (title: string | null) => void\n}\n\nconst Profile: React.FC<ProfilePropsType> = (props) => {\n\n    return (\n        <div className={s.content}>\n            <TopInfo profile={props.profile} status={props.status} updateStatus={props.updateStatus}/>\n            <MyPostsContainer/>\n        </div>\n    );\n}\n\n\nexport default Profile;","import React, {ComponentType} from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    getProfileThunk,\r\n    ProfileType,\r\n    setStatusThunk,\r\n    setUserProfile,\r\n    updateStatusThunk\r\n} from \"../../redux/profileReducer\";\r\nimport {AppReduxType} from \"../../redux/reduxStore\";\r\nimport {Redirect, RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {WithAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId\r\n\r\n        if (!userId) {\r\n            userId = JSON.stringify(this.props.userId)\r\n            if (!this.props.userId) {\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n        this.props.getProfileThunk(userId)\r\n        this.props.setStatusThunk(userId)\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                <Profile profile={this.props.profile} status={this.props.status}\r\n                         updateStatus={this.props.updateStatusThunk}/>\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\ntype mapStateToPropsType = {\r\n    profile: ProfileType | null\r\n    status: string | null\r\n    userId: number | null\r\n    isAuth: boolean\r\n}\r\n\r\ntype mapDispatchToPropsType = {\r\n    getProfileThunk: (userId: string) => void\r\n    setStatusThunk: (userId: string) => void\r\n    updateStatusThunk: (title: string | null) => void\r\n}\r\n\r\ntype paramsType = {\r\n    userId: string\r\n}\r\n\r\ntype PropsType = RouteComponentProps<paramsType> & ProfileApiPropsType\r\n\r\ntype ProfileApiPropsType = mapStateToPropsType & mapDispatchToPropsType\r\n\r\nconst mapStateToProps = (state: AppReduxType): mapStateToPropsType => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        userId: state.auth.userId,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (): mapDispatchToPropsType => {\r\n    return {\r\n        getProfileThunk,\r\n        setStatusThunk,\r\n        updateStatusThunk\r\n    }\r\n\r\n}\r\n\r\nexport default compose<ComponentType>(\r\n    //WithAuthRedirect,\r\n    withRouter,\r\n    connect(mapStateToProps, mapDispatchToProps())\r\n)(ProfileContainer)\r\n\r\n"],"names":["props","className","s","src","message","likeCounter","maxLengthTen","maxLengthVC","FormMyPostsRedux","reduxForm","form","onSubmit","handleSubmit","Field","name","component","FormControlsTextarea","validate","required","memo","post","posts","map","el","index","value","addPost","addNewPost","MyPostsContainer","connect","state","profilePage","postDate","dispatch","newText","addPostCreator","MyPosts","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onChange","e","currentTarget","autoFocus","onBlur","updateStatus","onDoubleClick","profile","photos","large","ava","fullName","Preloader","ProfileContainer","userId","this","match","params","JSON","stringify","history","push","getProfileThunk","setStatusThunk","updateStatusThunk","React","compose","withRouter","auth","isAuth"],"sourceRoot":""}