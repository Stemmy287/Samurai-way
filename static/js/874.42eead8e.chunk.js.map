{"version":3,"file":"static/js/874.42eead8e.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/Components/Profile/Profile.module.css?f51d","webpack://samurai-way/./src/Components/Profile/MyPosts/MyPosts.module.scss?ba8b","webpack://samurai-way/./src/Components/Profile/MyPosts/Post/Post.module.scss?e644","Components/Profile/MyPosts/Post/Post.tsx","Components/Profile/MyPosts/FormMyPosts.tsx","Components/Profile/MyPosts/MyPosts.tsx","Components/Profile/MyPosts/MyPostsContainer.tsx","webpack://samurai-way/./src/Components/Profile/TopInfo/profileStatusWithHooks.module.scss?7049","Components/Profile/TopInfo/ProfileStatusWithHook.tsx","Components/Profile/TopInfo/contact/Contact.tsx","webpack://samurai-way/./src/Components/Profile/TopInfo/profileData/profileData.module.scss?5f31","Components/Profile/TopInfo/profileData/ProfileData.tsx","Components/Profile/TopInfo/profileDataForm/ProfileDataForm.tsx","webpack://samurai-way/./src/Components/Profile/TopInfo/TopInfo.module.scss?96e7","Components/Profile/TopInfo/ProfileInfo.tsx","Components/Profile/Profile.tsx","Components/Profile/ProfileConatiner.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"content\":\"Profile_content__8wOo0\"};","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__fMM0o\",\"posts\":\"MyPosts_posts__YECKp\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__JVIO3\"};","import s from './Post.module.scss';\nimport React from 'react';\n\ntype PostPropsType = {\n    message: string\n    likeCounter: number\n}\n\nconst Post = (props: PostPropsType) => {\n    return (\n        <div className={s.item}>\n            <img alt='' src=\"https://w7.pngwing.com/pngs/862/646/png-transparent-beard-hipster-male-man-avatars-xmas-giveaway-icon-thumbnail.png\"/>\n            {props.message}\n            <div>\n                <span>like {props.likeCounter}</span>\n            </div>\n        </div>\n    );\n}\n\nexport default Post;","import React, {FC} from 'react';\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {FormControlsTextarea} from \"../../common/FormControls/FormControlsTextarea\";\r\nimport {maxLengthVC, required} from \"../../../utils/validators/validators\";\r\n\r\nexport type FormMyPostsType = {\r\n    addNewPost: string\r\n}\r\n\r\nlet maxLengthTen = maxLengthVC(10)\r\n\r\nconst FormMyPosts: FC<InjectedFormProps<FormMyPostsType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Field name={'addNewPost'} component={FormControlsTextarea} validate={[required, maxLengthTen]}></Field>\r\n            <button>Add</button>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport const FormMyPostsRedux = reduxForm<FormMyPostsType>({form: 'addNewPosts'})(FormMyPosts)\r\n\r\n","import s from './MyPosts.module.scss';\nimport React, {memo} from 'react';\nimport Post from './Post/Post';\nimport {MyPostsPropsType} from \"./MyPostsContainer\";\nimport {FormMyPostsRedux, FormMyPostsType} from \"./FormMyPosts\";\n\nconst MyPosts = memo((props: MyPostsPropsType) => {\n\n    let post = props.posts.map((el, index) => <Post key={index} message={el.message}\n                                                                   likeCounter={el.likeCounter}/>)\n\n    const AddNewPost = (value: FormMyPostsType) => {\n        props.addPost(value.addNewPost)\n    }\n\n    return (\n        <div className={s.postsBlock}>\n            <h3>My posts</h3>\n            <div>\n                <FormMyPostsRedux onSubmit={AddNewPost}/>\n            </div>\n            <div className={s.posts}>\n                {post}\n            </div>\n        </div>\n    );\n})\n\nexport default MyPosts;","import React from 'react';\nimport {addPostCreator, changeNewPostCreator, postDateType, ProfilePageType} from \"../../../redux/profileReducer\";\nimport MyPosts from \"./MyPosts\";\nimport {connect} from \"react-redux\";\nimport {AppReduxType} from \"../../../redux/reduxStore\";\nimport {Dispatch} from \"redux\";\n\ntype mapStateToPropsType = {\n    posts: postDateType[]\n}\n\ntype mapDispatchToProps = {\n    addPost: (newText: string) => void,\n}\n\nexport type MyPostsPropsType = mapStateToPropsType & mapDispatchToProps\n\nconst mapStateToProps = (state: AppReduxType): mapStateToPropsType => {\n    return {\n        posts: state.profilePage.postDate,\n    }\n\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch): mapDispatchToProps => {\n    return {\n        addPost: (newText: string) => {\n            dispatch(addPostCreator(newText))\n        }\n    }\n\n}\n\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)","// extracted by mini-css-extract-plugin\nexport default {\"statusContainer\":\"profileStatusWithHooks_statusContainer__6BjY+\",\"status\":\"profileStatusWithHooks_status__mRLAq\"};","import {ChangeEvent, FC, useEffect, useState} from \"react\";\r\nimport s from './profileStatusWithHooks.module.scss'\r\n\r\ntype ProfileStatusPropsType = {\r\n  status: string | null\r\n  updateStatus: (title: string | null) => void\r\n}\r\n\r\nexport const ProfileStatusWithHooks: FC<ProfileStatusPropsType> = (props) => {\r\n\r\n  const [editMode, setEditMode] = useState(false)\r\n  const [status, setStatus] = useState(props.status)\r\n\r\n  useEffect(() => {\r\n    setStatus(props.status)\r\n  }, [props.status])\r\n\r\n  const onEditMode = () => {\r\n    setEditMode(true)\r\n  }\r\n\r\n  const offEditMode = () => {\r\n    setEditMode(false)\r\n    props.updateStatus(status)\r\n  }\r\n\r\n  const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setStatus(e.currentTarget.value)\r\n  }\r\n\r\n\r\n  return <div className={s.statusContainer}>\r\n    {editMode ? <input onChange={onChangeHandler} autoFocus onBlur={offEditMode} value={status ? status : ''}/> :\r\n      <div className={s.status}><b>Status</b>:<span onDoubleClick={onEditMode}>{status ? status : 'Type your new status'}</span></div>}\r\n  </div>\r\n\r\n}","import React, {FC} from 'react';\r\n\r\ntype ContactPropsType = {\r\n  contactTitle: string\r\n  contactValue: string | null\r\n}\r\n\r\nexport const Contact:FC<ContactPropsType> = ({\r\n  contactTitle,\r\n  contactValue\r\n                                             }) => {\r\n  return (\r\n    <div style={{paddingLeft: '10px'}}>\r\n        <b>{contactTitle}</b> : {contactValue}\r\n    </div>\r\n  );\r\n};\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"profileDataContainer\":\"profileData_profileDataContainer__gfIgK\",\"dataContainer\":\"profileData_dataContainer__wqPnj\",\"contactsContainer\":\"profileData_contactsContainer__Xdamp\"};","import React, {FC} from 'react';\r\nimport {Contact} from \"../contact/Contact\";\r\nimport {ContactsType, ProfileType} from \"../../../../redux/profileReducer\";\r\nimport s from './profileData.module.scss'\r\n\r\ntype ProfileDataType = {\r\n  profile: ProfileType\r\n  isOwner: boolean\r\n  goToEditMode: () => void\r\n}\r\n\r\nexport const ProfileData: FC<ProfileDataType> = ({\r\n                                                   profile,\r\n                                                   isOwner,\r\n                                                   goToEditMode\r\n                                                 }) => {\r\n\r\n  return (\r\n    <div className={s.profileDataContainer}>\r\n      <div className={s.dataContainer}>\r\n        <div><b>Full name</b>: {profile.fullName}</div>\r\n        <div><b>Looking for a job</b>: {profile.lookingForAJob ? 'yes' : 'no'}</div>\r\n        {profile.lookingForAJob &&\r\n            <div><b>My professional skills</b>: {profile.lookingForAJobDescription}</div>\r\n        }\r\n        <div><b>About me</b>: {profile.aboutMe}</div>\r\n        {isOwner && <div>\r\n            <button onClick={goToEditMode}>edit</button>\r\n        </div>}\r\n      </div>\r\n      <div className={s.contactsContainer}><b>Contacts: </b> {profile.contacts && Object.keys(profile.contacts).map(key => <Contact key={key}\r\n                                                                                                   contactTitle={key}\r\n                                                                                                   contactValue={profile.contacts[key as keyof ContactsType]}/>)}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n","import React, {FC} from 'react';\r\nimport {createField, FormControlsInput, FormControlsTextarea} from \"../../../common/FormControls/FormControlsTextarea\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {ProfileType} from \"../../../../redux/profileReducer\";\r\nimport s from \"../../../common/FormControls/formControls.module.scss\";\r\n\r\n\r\nexport type ProfileDataFormType = {\r\n  fullName: string\r\n  lookingForAJob: boolean\r\n  lookingForAJobDescription: string\r\n  aboutMe: string\r\n}\r\n\r\nexport const ProfileDataForm: FC<InjectedFormProps<ProfileDataFormType>> = ({handleSubmit,initialValues, error}) => {\r\n  const profile = initialValues as ProfileType\r\n  return (\r\n    <form onSubmit={handleSubmit} className={s.editInfo}>\r\n      <div>\r\n        <button className={s.button}>save</button>\r\n      </div>\r\n      {error && <div className={s.formSummeryError}>{error}</div>}\r\n      <div>\r\n        <b>Full name</b>: {createField('fullName', FormControlsInput, {placeholder: 'Full name'})}\r\n      </div>\r\n      <div>\r\n        <b>Looking for a job</b>:{createField('lookingForAJob', FormControlsInput, {type: 'checkbox'})}\r\n      </div>\r\n      <div>\r\n        <b>My professional skills</b>:{createField('lookingForAJobDescription', FormControlsTextarea, {placeholder: 'My professional skills'})}\r\n      </div>\r\n      <div>\r\n        <b>About me</b>: {createField('aboutMe', FormControlsTextarea, {placeholder: 'About me'})}\r\n      </div>\r\n      <div><b>Contacts</b>: {Object.keys(profile.contacts).map(key => <div key={key}><b>{key}</b>:{createField('contacts.' + key, FormControlsInput, {placeholder: key})} </div>)}\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport const ProfileDataFormReduxForm = reduxForm<ProfileDataFormType>({form: 'editProfile'})(ProfileDataForm)\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"profileInfoContainer\":\"TopInfo_profileInfoContainer__rfHXW\",\"ava\":\"TopInfo_ava__egLCP\",\"info\":\"TopInfo_info__2rR9p\"};","import React, {ChangeEvent, FC, useState} from 'react';\nimport {ProfileType} from \"../../../redux/profileReducer\";\nimport Preloader from \"../../common/Preloader/Preloader\";\nimport ava from '../../../assets/images/149071.png'\nimport {ProfileStatusWithHooks} from \"./ProfileStatusWithHook\";\nimport {ProfileData} from \"./profileData/ProfileData\";\nimport {ProfileDataFormReduxForm, ProfileDataFormType} from \"./profileDataForm/ProfileDataForm\";\nimport s from './TopInfo.module.scss'\n\ntype TopInfoTypeProps = {\n  profile: ProfileType\n  status: string | null\n  updateStatus: (title: string | null) => void\n  isOwner: boolean\n  savePhoto: (img: File) => void\n  saveProfile: (profile: ProfileDataFormType) => void\n  isEdit: 'none' | 'successes'\n  setIsEdit: (isEdit: 'none' | 'successes') => void\n}\n\nexport const ProfileInfo: FC<TopInfoTypeProps> = ({\n                                                    profile,\n                                                    status,\n                                                    updateStatus,\n                                                    isOwner,\n                                                    savePhoto,\n                                                    saveProfile,\n                                                    isEdit,\n                                                    setIsEdit\n                                                  }) => {\n\n  const [editMode, setEditMode] = useState(false)\n\n  if (!profile) {\n    return <Preloader/>\n  }\n\n  const mainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files?.length) {\n      savePhoto(e.target.files[0])\n    }\n  }\n\n  const onSubmit = (formData: ProfileDataFormType) => {\n    saveProfile(formData)\n    if (isEdit === 'successes')\n      setEditMode(false)\n  }\n\n  return (\n    <div className={s.profileInfoContainer}>\n        <div className={s.ava}>\n          <img alt='' src={profile.photos?.large || ava}/>\n          <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\n          {isOwner &&\n              <div>\n                  <input id={'file'} type={'file'} onChange={mainPhotoSelected}/>\n                  <label htmlFor='file'>upload photo</label>\n              </div>\n          }</div>\n\n        {editMode ? <ProfileDataFormReduxForm initialValues={profile} onSubmit={onSubmit}/> :\n          <ProfileData goToEditMode={() => {\n            setIsEdit('none')\n            setEditMode(true)\n          }} profile={profile} isOwner={isOwner}/>}\n    </div>\n  )\n}\n\n","import React from 'react';\nimport s from './Profile.module.css';\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\nimport {ProfileType} from \"../../redux/profileReducer\";\nimport {ProfileInfo} from \"./TopInfo/ProfileInfo\";\nimport {ProfileDataFormType} from \"./TopInfo/profileDataForm/ProfileDataForm\";\n\n\ntype ProfilePropsType = {\n  profile: ProfileType\n  status: string | null\n  updateStatus: (title: string | null) => void\n  isOwner: boolean\n  savePhoto: (img: File) => void\n  saveProfile: (profile: ProfileDataFormType) => void\n  isEdit: 'none' | 'successes'\n  setIsEdit: (isEdit: 'none' | 'successes') => void\n}\n\nconst Profile: React.FC<ProfilePropsType> = (props) => {\n\n  return (\n    <div className={s.content}>\n      <ProfileInfo setIsEdit={props.setIsEdit} isEdit={props.isEdit} saveProfile={props.saveProfile} savePhoto={props.savePhoto} isOwner={props.isOwner}\n                   profile={props.profile} status={props.status} updateStatus={props.updateStatus}/>\n      <MyPostsContainer/>\n    </div>\n  );\n}\n\n\nexport default Profile;","import React, {ComponentType} from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    getProfileThunk,\r\n    ProfileType,\r\n    savePhotoThunk, saveProfileThunk, setIsEdit,\r\n    setStatusThunk,\r\n    updateStatusThunk\r\n} from \"../../redux/profileReducer\";\r\nimport {AppReduxType} from \"../../redux/reduxStore\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\nimport {ProfileDataFormType} from \"./TopInfo/profileDataForm/ProfileDataForm\";\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId\r\n\r\n        if (!userId) {\r\n            userId = JSON.stringify(this.props.userId)\r\n            if (!this.props.userId) {\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n        this.props.getProfileThunk(+userId)\r\n        this.props.setStatusThunk(+userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: PropsType, prevState: PropsType) {\r\n        if(this.props.match.params.userId != prevProps.match.params.userId){\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                <Profile\r\n                  isEdit={this.props.isEdit}\r\n                  isOwner={!this.props.match.params.userId}\r\n                  profile={this.props.profile}\r\n                  status={this.props.status}\r\n                  updateStatus={this.props.updateStatusThunk}\r\n                  savePhoto={this.props.savePhotoThunk}\r\n                  saveProfile={this.props.saveProfileThunk}\r\n                  setIsEdit={this.props.setIsEdit}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\ntype mapStateToPropsType = {\r\n    profile: ProfileType\r\n    status: string | null\r\n    userId: number | null\r\n    isAuth: boolean\r\n    isEdit: 'none' | 'successes'\r\n}\r\n\r\ntype mapDispatchToPropsType = {\r\n    getProfileThunk: (userId: number) => void\r\n    setStatusThunk: (userId: number) => void\r\n    updateStatusThunk: (title: string | null) => void\r\n    savePhotoThunk:(img: File) => void\r\n    saveProfileThunk: (profile: ProfileDataFormType) => void\r\n    setIsEdit: (isEdit: 'none' | 'successes') => void\r\n}\r\n\r\ntype paramsType = {\r\n    userId: string\r\n}\r\n\r\ntype PropsType = RouteComponentProps<paramsType> & ProfileApiPropsType\r\n\r\ntype ProfileApiPropsType = mapStateToPropsType & mapDispatchToPropsType\r\n\r\nconst mapStateToProps = (state: AppReduxType): mapStateToPropsType => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        userId: state.auth.userId,\r\n        isAuth: state.auth.isAuth,\r\n        isEdit: state.profilePage.isEdit\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (): mapDispatchToPropsType => {\r\n    return {\r\n        getProfileThunk,\r\n        setStatusThunk,\r\n        updateStatusThunk,\r\n        savePhotoThunk,\r\n        saveProfileThunk,\r\n        setIsEdit\r\n    }\r\n\r\n}\r\n\r\nexport default compose<ComponentType>(\r\n    //WithAuthRedirect,\r\n    withRouter,\r\n    connect(mapStateToProps, mapDispatchToProps())\r\n)(ProfileContainer)\r\n\r\n"],"names":["props","className","s","alt","src","message","likeCounter","maxLengthTen","maxLengthVC","FormMyPostsRedux","reduxForm","form","onSubmit","handleSubmit","Field","name","component","FormControlsTextarea","validate","required","memo","post","posts","map","el","index","value","addPost","addNewPost","MyPostsContainer","connect","state","profilePage","postDate","dispatch","newText","addPostCreator","MyPosts","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onChange","e","currentTarget","autoFocus","onBlur","updateStatus","onDoubleClick","Contact","contactTitle","contactValue","style","paddingLeft","ProfileData","profile","isOwner","goToEditMode","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","onClick","contacts","Object","keys","key","ProfileDataFormReduxForm","initialValues","error","createField","FormControlsInput","placeholder","type","ProfileInfo","savePhoto","saveProfile","isEdit","setIsEdit","Preloader","photos","large","ava","id","target","files","length","htmlFor","formData","ProfileContainer","userId","this","match","params","JSON","stringify","history","push","getProfileThunk","setStatusThunk","refreshProfile","prevProps","prevState","updateStatusThunk","savePhotoThunk","saveProfileThunk","React","compose","withRouter","auth","isAuth"],"sourceRoot":""}