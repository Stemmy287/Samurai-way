{"version":3,"file":"static/js/76.4ac47000.chunk.js","mappings":"mLACA,EAA0B,yBAA1B,EAAkE,8BAAlE,EAAyG,wBAAzG,EAA0I,wBAA1I,EAAkL,+BAAlL,EAA2N,yB,mBCM7MA,EAAc,SAACC,GACzB,OACI,gBAAKC,UAAWC,EAAhB,SAA4BF,EAAMG,W,UCC7BC,EAAa,SAACJ,GACvB,OACI,iBAAKC,UAAWC,EAAW,IAAMA,EAAjC,WACI,gBAAKG,IAAKL,EAAMM,IAAKC,IAAI,MACzB,SAAC,KAAD,CAASC,GAAE,mBAAcR,EAAMS,IAA/B,SAAsCT,EAAMU,W,sCCLpDC,GAAiBC,EAAAA,EAAAA,GAAY,IAWpBC,GAAmBC,EAAAA,EAAAA,GAA2B,CAACC,KAAM,kBAAlCD,EATmC,SAACd,GAChE,OACI,kBAAMgB,SAAUhB,EAAMiB,aAAtB,WACI,SAACC,EAAA,EAAD,CAAOR,KAAM,aAAcS,UAAWC,EAAAA,GAAsBC,SAAU,CAACC,EAAAA,EAAUX,GAAiBY,YAAa,qBAC/G,0CCkBZ,EA1BgB,SAACvB,GAEb,IAAIwB,EAAcxB,EAAMyB,QAAQC,KAAI,SAAAC,GAAE,OAAI,SAACvB,EAAD,CAAYE,IAAKqB,EAAGrB,IAAiBI,KAAMiB,EAAGjB,KAClBD,GAAIkB,EAAGlB,IADLkB,EAAGlB,OAEvEmB,EAAe5B,EAAM6B,SAASH,KAAI,SAAAC,GAAE,OACpC,SAAC5B,EAAD,CAAyBI,QAASwB,EAAGxB,SAAnBwB,EAAGlB,OAOzB,OACQ,iBAAKR,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,SACKsB,KAEL,iBAAKvB,UAAWC,EAAhB,WACK,yBAAM0B,KACP,SAACf,EAAD,CAAkBG,SAXZ,SAACc,GACnB9B,EAAM+B,WAAWD,EAAMC,sB,qDCPzBC,EAAkB,SAACC,GACrB,MAAO,CACHC,OAAQD,EAAME,KAAKD,SCQ3B,IAeA,GAAeE,EAAAA,EAAAA,KDnBR,SAA6BC,GAUhC,OAAOC,EAAAA,EAAAA,IAAQN,EAARM,EAR2B,SAACtC,GAC/B,IAAKkC,EAAwBlC,EAAxBkC,OAAWK,GAAhB,OAA6BvC,EAA7B,GAEA,OAAKkC,GAEE,SAACG,GAAD,UAAeE,KAFF,SAAC,KAAD,CAAU/B,GAAI,iBCgBtC8B,EAAAA,EAAAA,KAjBoB,SAACL,GACrB,MAAO,CACHR,QAASQ,EAAMO,YAAYC,WAC3BZ,SAAUI,EAAMO,YAAYE,gBAIT,SAACC,GACxB,MAAO,CACHZ,WAAY,SAACa,GACTD,GAASE,EAAAA,EAAAA,GAAkBD,SAKvC,CAGEE","sources":["webpack://samurai-way/./src/Components/Dialogs/Dialogs.module.css?db5c","Components/Dialogs/MessageItem/MessageItem.tsx","Components/Dialogs/DialogItem/DialogItem.tsx","Components/Dialogs/DialogsForm.tsx","Components/Dialogs/Dialogs.tsx","hoc/withAuthRedirect.tsx","Components/Dialogs/DialogsContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__dV3s7\",\"dialogsItems\":\"Dialogs_dialogsItems__aliU9\",\"dialog\":\"Dialogs_dialog__I9nD9\",\"active\":\"Dialogs_active__MwAXR\",\"messagesItems\":\"Dialogs_messagesItems__rfuY0\",\"message\":\"Dialogs_message__ReL74\"};","import React from 'react';\r\nimport s from \"../Dialogs.module.css\";\r\n\r\ntype MessageItemTypeProps = {\r\n    message: string\r\n}\r\n\r\nexport  const MessageItem = (props: MessageItemTypeProps) => {\r\n    return (\r\n        <div className={s.message}>{props.message}</div>\r\n    )\r\n}\r\n\r\n","import React from 'react';\r\nimport s from \"../Dialogs.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype DialogItemTypeProps = {\r\n    name: string\r\n    id: number\r\n    ava: string\r\n}\r\n\r\nexport const DialogItem = (props: DialogItemTypeProps) => {\r\n    return (\r\n        <div className={s.dialog + ' ' + s.active}>\r\n            <img src={props.ava} alt=\"\"/>\r\n            <NavLink to={`/dialogs/${props.id}`}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import React, {FC} from 'react';\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthVC, required} from \"../../utils/validators/validators\";\r\nimport {FormControlsTextarea} from \"../common/FormControls/FormControlsTextarea\";\r\n\r\nexport type DialogsFormType = {\r\n    addMessage: string\r\n}\r\n\r\nlet maxLengthFifty = maxLengthVC(50)\r\n\r\nexport const DialogsForm: FC<InjectedFormProps<DialogsFormType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Field name={'addMessage'} component={FormControlsTextarea} validate={[required, maxLengthFifty]} placeholder={'add new message'}></Field>\r\n            <button>add</button>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport const DialogsFormRedux = reduxForm<DialogsFormType>({form: 'addMessageForm'})(DialogsForm)\r\n\r\n","import s from './Dialogs.module.css'\nimport {MessageItem} from \"./MessageItem/MessageItem\";\nimport {DialogItem} from \"./DialogItem/DialogItem\";\nimport React from 'react'\nimport {DialogsPropsType} from \"./DialogsContainer\";\nimport {DialogsFormRedux, DialogsFormType} from \"./DialogsForm\";\n\nconst Dialogs = (props: DialogsPropsType) => {\n\n    let dialogsItem = props.dialogs.map(el => <DialogItem ava={el.ava} key={el.id} name={el.name}\n                                                                          id={el.id}/>);\n    let messagesItem = props.messages.map(el =>\n        <MessageItem key={el.id} message={el.message}/>\n    );\n\n    const AddNewMessage = (value: DialogsFormType) => {\n        props.addMessage(value.addMessage)\n    }\n\n    return (\n            <div className={s.dialogs}>\n                <div className={s.dialogsItems}>\n                    {dialogsItem}\n                </div>\n                <div className={s.messagesItems}>\n                     <div>{messagesItem}</div>\n                    <DialogsFormRedux onSubmit={AddNewMessage}/>\n                </div>\n            </div>\n    )\n}\n\n\nexport default Dialogs","import React, {Component, ComponentType} from 'react';\r\nimport {AppReduxType} from \"../redux/reduxStore\";\r\nimport {connect} from \"react-redux\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst MapStateToProps = (state: AppReduxType): MapStateToPropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function WithAuthRedirect<T>(Component: ComponentType<T>) {\r\n\r\n    const withAuthRedirectContainer = (props: MapStateToPropsType) => {\r\n        let {isAuth, ...restProps} = props\r\n\r\n        if (!isAuth) return <Redirect to={'/login'}/>\r\n\r\n        return <Component {...restProps as T}/>\r\n    } // user\r\n\r\n    return connect(MapStateToProps)(withAuthRedirectContainer)\r\n\r\n}\r\n\r\n","import React, {compose, Dispatch} from 'redux'\nimport {addMessageCreator, DialogDateType, MessageDateType,} from \"../../redux/dialogReducer\";\nimport {AppReduxType} from \"../../redux/reduxStore\";\nimport Dialogs from \"./Dialogs\";\nimport {connect} from \"react-redux\";\nimport {WithAuthRedirect} from \"../../hoc/withAuthRedirect\";\nimport {ComponentType} from \"react\";\n\ntype MapStateToPropsType = {\n    dialogs: DialogDateType[],\n    messages: MessageDateType[]\n}\n\ntype MapDispatchToPropsType = {\n    addMessage: (newText: string) => void,\n}\n\nexport type DialogsPropsType = MapStateToPropsType & MapDispatchToPropsType\n\nconst mapStateToProps = (state: AppReduxType): MapStateToPropsType => {\n    return {\n        dialogs: state.dialogsPage.dialogDate,\n        messages: state.dialogsPage.messageDate\n    }\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\n    return {\n        addMessage: (newText: string) => {\n            dispatch(addMessageCreator(newText))\n        }\n    }\n}\n\nexport default compose<ComponentType>(\n    WithAuthRedirect,\n    connect(mapStateToProps, mapDispatchToProps)\n)(Dialogs)\n\n"],"names":["MessageItem","props","className","s","message","DialogItem","src","ava","alt","to","id","name","maxLengthFifty","maxLengthVC","DialogsFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","FormControlsTextarea","validate","required","placeholder","dialogsItem","dialogs","map","el","messagesItem","messages","value","addMessage","MapStateToProps","state","isAuth","auth","compose","Component","connect","restProps","dialogsPage","dialogDate","messageDate","dispatch","newText","addMessageCreator","Dialogs"],"sourceRoot":""}